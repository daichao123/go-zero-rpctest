// Code generated by goctl. DO NOT EDIT!

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	userLevelsFieldNames          = builder.RawFieldNames(&UserLevels{})
	userLevelsRows                = strings.Join(userLevelsFieldNames, ",")
	userLevelsRowsExpectAutoSet   = strings.Join(stringx.Remove(userLevelsFieldNames, "`id`", "`create_time`", "`update_time`", "`create_at`", "`update_at`"), ",")
	userLevelsRowsWithPlaceHolder = strings.Join(stringx.Remove(userLevelsFieldNames, "`id`", "`create_time`", "`update_time`", "`create_at`", "`update_at`"), "=?,") + "=?"
)

type (
	userLevelsModel interface {
		Insert(ctx context.Context, data *UserLevels) (sql.Result, error)
		TransInsert(ctx context.Context, data *UserLevels, session sqlx.Session) (sql.Result, error) //事务insert
		FindOne(ctx context.Context, id int64) (*UserLevels, error)
		FindOneByWhere(ctx context.Context, field string, value interface{}) (*UserLevels, error)
		Update(ctx context.Context, newData *UserLevels) error
		TransUpdate(ctx context.Context, data *UserLevels, session sqlx.Session) error
		Delete(ctx context.Context, id int64) error
	}

	defaultUserLevelsModel struct {
		conn  sqlx.SqlConn
		table string
	}

	UserLevels struct {
		Id             int64        `db:"id"`
		UserId         int64        `db:"user_id"`          // 用户ID
		LevelType      string       `db:"level_type"`       // 等级类型
		Level          int64        `db:"level"`            // 等级值
		LevelName      string       `db:"level_name"`       // 等级名称
		ManualLevel    int64        `db:"manual_level"`     // 手动等级
		PledgeLevel    int64        `db:"pledge_level"`     // 质押等级
		IsManualLevel  int64        `db:"is_manual_level"`  // 是否手动质押 0否 1是
		IsStopReward   int64        `db:"is_stop_reward"`   // 是否停止释放动态收益
		ProtectEndTime sql.NullTime `db:"protect_end_time"` // 保护期结束时间
		CreatedAt      sql.NullTime `db:"created_at"`
		UpdatedAt      sql.NullTime `db:"updated_at"`
	}
)

func newUserLevelsModel(conn sqlx.SqlConn) *defaultUserLevelsModel {
	return &defaultUserLevelsModel{
		conn:  conn,
		table: "`user_levels`",
	}
}

func (m *defaultUserLevelsModel) Delete(ctx context.Context, id int64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

// FindOneByWhere 根据查询条件查询一条记录
func (m *defaultUserLevelsModel) FindOneByWhere(ctx context.Context, field string, value interface{}) (*UserLevels, error) {
	query := fmt.Sprintf("select %s from %s where %s = ? limit 1", userLevelsRows, m.table, field)
	var resp UserLevels
	err := m.conn.QueryRowCtx(ctx, &resp, query, value)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultUserLevelsModel) FindOne(ctx context.Context, id int64) (*UserLevels, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", userLevelsRows, m.table)
	var resp UserLevels
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

//TransInsert 重写insert方法 使其满足事务使用同一个会话
func (m *defaultUserLevelsModel) TransInsert(ctx context.Context, data *UserLevels, session sqlx.Session) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)", m.table, usersRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.UserId, data.LevelType, data.Level, data.LevelName, data.ManualLevel, data.PledgeLevel, data.IsManualLevel, data.IsStopReward, data.ProtectEndTime, data.CreatedAt, data.UpdatedAt)
	return ret, err
}

func (m *defaultUserLevelsModel) Insert(ctx context.Context, data *UserLevels) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)", m.table, userLevelsRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.UserId, data.LevelType, data.Level, data.LevelName, data.ManualLevel, data.PledgeLevel, data.IsManualLevel, data.IsStopReward, data.ProtectEndTime, data.CreatedAt, data.UpdatedAt)
	return ret, err
}

func (m *defaultUserLevelsModel) Update(ctx context.Context, data *UserLevels) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, userLevelsRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.UserId, data.LevelType, data.Level, data.LevelName, data.ManualLevel, data.PledgeLevel, data.IsManualLevel, data.IsStopReward, data.ProtectEndTime, data.CreatedAt, data.UpdatedAt, data.Id)
	return err
}

func (m *defaultUserLevelsModel) TransUpdate(ctx context.Context, data *UserLevels, session sqlx.Session) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, userLevelsRowsWithPlaceHolder)
	_, err := session.ExecCtx(ctx, query, data.UserId, data.LevelType, data.Level, data.LevelName, data.ManualLevel, data.PledgeLevel, data.IsManualLevel, data.IsStopReward, data.ProtectEndTime, data.CreatedAt, data.UpdatedAt, data.Id)
	return err
}

func (m *defaultUserLevelsModel) tableName() string {
	return m.table
}
